#!/usr/bin/env python3
"""
Outlook email setup script for EventApp.

This script helps you set up Outlook email configuration for password reset and email verification.
"""

import os
import secrets

def setup_outlook_email():
    """Set up Outlook email configuration."""
    print("üìß Outlook Email Setup for EventApp")
    print("=" * 40)
    print()
    
    # Check if .env already exists
    if os.path.exists('.env'):
        print("‚ö†Ô∏è  .env file already exists!")
        overwrite = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    print("This script will help you set up Outlook email configuration.")
    print("Supported domains: @outlook.com, @hotmail.com, @live.com, @msn.com")
    print()
    
    # Get email address
    email = input("Enter your Outlook email address: ").strip()
    if not email:
        print("Email address is required!")
        return
    
    # Validate email domain
    outlook_domains = ['@outlook.com', '@hotmail.com', '@live.com', '@msn.com']
    if not any(domain in email.lower() for domain in outlook_domains):
        print("‚ö†Ô∏è  Warning: This doesn't appear to be an Outlook email address.")
        print("Supported domains: @outlook.com, @hotmail.com, @live.com, @msn.com")
        continue_anyway = input("Continue anyway? (y/N): ").strip().lower()
        if continue_anyway != 'y':
            print("Setup cancelled.")
            return
    
    # Get password
    print("\nüîê Password Information:")
    print("- Use your regular Outlook password")
    print("- If you have 2FA enabled, you may need an App Password")
    print("- App Passwords can be created at: https://account.microsoft.com/security")
    print()
    
    password = input("Enter your Outlook password: ").strip()
    if not password:
        print("Password is required!")
        return
    
    # Generate secret key
    secret_key = secrets.token_hex(32)
    
    # Create .env content
    env_content = f"""# EventApp Environment Configuration
# Generated by setup_outlook.py

# Flask Configuration
SECRET_KEY={secret_key}
FLASK_ENV=development
DATABASE_URL=sqlite:///eventapp.db

# Outlook Email Configuration
MAIL_SERVER=smtp-mail.outlook.com
MAIL_PORT=587
MAIL_USE_TLS=True
MAIL_USERNAME={email}
MAIL_PASSWORD={password}

# App Configuration
APP_NAME=EventApp
ADMIN_EMAIL={email}
"""
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("\n‚úÖ .env file created successfully!")
        print(f"üìß Email: {email}")
        print(f"üñ•Ô∏è  Server: smtp-mail.outlook.com:587")
        print()
        
        # Test email configuration
        test_now = input("Do you want to test the email configuration now? (Y/n): ").strip().lower()
        if test_now != 'n':
            print("\nüß™ Testing email configuration...")
            os.system("python test_email_config.py")
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return
    
    print("\nüéâ Outlook email setup complete!")
    print("You can now use password reset and email verification features.")
    print()
    print("Next steps:")
    print("1. Restart your application: python app.py")
    print("2. Test password reset functionality")
    print("3. Test email verification during registration")
    print()
    print("üìö For troubleshooting, see: OUTLOOK_SETUP.md")

if __name__ == '__main__':
    setup_outlook_email()
