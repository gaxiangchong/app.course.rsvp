#!/usr/bin/env python3
"""
Email setup script for EventApp.

This script helps you set up email configuration for password reset and email verification.
"""

import os
import sys
import secrets

def create_env_file():
    """Create .env file with email configuration."""
    print("üîß EventApp Email Setup")
    print("=" * 40)
    print()
    
    # Check if .env already exists
    if os.path.exists('.env'):
        print("‚ö†Ô∏è  .env file already exists!")
        overwrite = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    print("This script will help you set up email configuration.")
    print("You'll need an email account with SMTP access.")
    print()
    
    # Get email configuration
    print("üìß Email Configuration")
    print("-" * 20)
    
    email = input("Enter your email address: ").strip()
    if not email:
        print("Email address is required!")
        return
    
    print("\nChoose your email provider:")
    print("1. Gmail (recommended)")
    print("2. Outlook/Hotmail")
    print("3. Yahoo")
    print("4. Custom SMTP")
    
    choice = input("Enter your choice (1-4): ").strip()
    
    if choice == '1':
        # Gmail configuration
        print("\nüìã Gmail Setup Instructions:")
        print("1. Enable 2-factor authentication on your Gmail account")
        print("2. Go to Google Account > Security > 2-Step Verification > App passwords")
        print("3. Generate an App Password for 'Mail'")
        print("4. Use the 16-character App Password (not your regular password)")
        print()
        
        app_password = input("Enter your Gmail App Password: ").strip()
        if not app_password:
            print("App Password is required for Gmail!")
            return
        
        mail_server = "smtp.gmail.com"
        mail_port = 587
        mail_use_tls = True
        
    elif choice == '2':
        # Outlook configuration
        password = input("Enter your Outlook password: ").strip()
        if not password:
            print("Password is required!")
            return
        
        mail_server = "smtp-mail.outlook.com"
        mail_port = 587
        mail_use_tls = True
        app_password = password
        
    elif choice == '3':
        # Yahoo configuration
        app_password = input("Enter your Yahoo App Password: ").strip()
        if not app_password:
            print("App Password is required for Yahoo!")
            return
        
        mail_server = "smtp.mail.yahoo.com"
        mail_port = 587
        mail_use_tls = True
        
    elif choice == '4':
        # Custom SMTP
        mail_server = input("Enter SMTP server: ").strip()
        mail_port = input("Enter SMTP port (default 587): ").strip() or "587"
        mail_use_tls = input("Use TLS? (Y/n): ").strip().lower() != 'n'
        app_password = input("Enter SMTP password: ").strip()
        
        if not mail_server or not app_password:
            print("SMTP server and password are required!")
            return
    else:
        print("Invalid choice!")
        return
    
    # Generate secret key
    secret_key = secrets.token_hex(32)
    
    # Create .env content
    env_content = f"""# EventApp Environment Configuration
# Generated by setup_email.py

# Flask Configuration
SECRET_KEY={secret_key}
FLASK_ENV=development
DATABASE_URL=sqlite:///eventapp.db

# Email Configuration
MAIL_SERVER={mail_server}
MAIL_PORT={mail_port}
MAIL_USE_TLS={str(mail_use_tls).lower()}
MAIL_USERNAME={email}
MAIL_PASSWORD={app_password}

# App Configuration
APP_NAME=EventApp
ADMIN_EMAIL={email}
"""
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("\n‚úÖ .env file created successfully!")
        print(f"üìß Email: {email}")
        print(f"üñ•Ô∏è  Server: {mail_server}:{mail_port}")
        print()
        
        # Test email configuration
        test_now = input("Do you want to test the email configuration now? (Y/n): ").strip().lower()
        if test_now != 'n':
            print("\nüß™ Testing email configuration...")
            os.system("python test_email_config.py")
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return
    
    print("\nüéâ Email setup complete!")
    print("You can now use password reset and email verification features.")
    print("\nNext steps:")
    print("1. Restart your application")
    print("2. Test password reset functionality")
    print("3. Test email verification during registration")

if __name__ == '__main__':
    create_env_file()
